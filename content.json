{"pages":[],"posts":[{"title":"travis CI private repository 클론하기","text":"Intro…빌드 자동화를 위해 프로젝트에 Travis CI를 도입하면서 private repository 접근 거부(access denied) 문제가 발생하였다. 이에 대한 원인과 해결 과정을 정리해보았다. 프로젝트 상황Rentaldream 프로젝트의 html 템플릿 및 정적 자원들은 모두 유료 구매한것이기 때문에 Rentaldream-resource 라는 별도의 private repository에서 관리하며, submodule로 등록하여 사용 문제 상황 travis CI의 빌드 과정에서 정적 리소스를 업데이트 하는데 Rentaldream-resource 레포지토리에 대하여 접근이 거절됨 해결 과정 우선 현재 문제의 근본적인 원인은 private repository에 대한 접근 권한을 얻기 전에 git submodule update 명령어가 실행되는 것임. travis CI는 submodule이 존재하는 프로젝트에 대해 자동으로 git submodule update 명령을 실행하는데, 이 시점에는 접근 권한이 없기 때문에 permission denied 에러가 발생했던것. 문제 해결을 위해서는 git submodule update 자동 실행을 막고, private repository에 대한 접근 권한을 획득 한 후 직접 git submodule update 명령을 실행해야함. 우선 submodule update 자동 실행을 막기 위해 .travis.yml 파일에 submodule false 옵션 추가 다음으로 private repository에 대한 접근 권한을 획득 한 후 git submodule update 명령어를 호출해야하는데, travis에서 공식적으로 4가지의 방법을 지원함 travis CI 공식 문서 1. deploy key 현재 public repository에 pass phrase로 암호화된 개인키를 포함시키고 접근하고자 하는 private repository에 공개키를 등록하는 방식 private repository에서 다른 private repository에 접근하는 경우는 travis client를 통하여 개인키 노출 없이 접근 가능하다. 하지만 깃허브 정책상 하나의 private rpository마다 각각의 개인키와 공개키를 가져야 하므로 여러 private repository에 접근하기 위해서는 그 수만큼 개인키를 등록해줘야한다. 만약 private repository에서 다른 private repository를 참조해야 한다면 아래의 user key를 이용하는게 좋다. deploy key 설정 방법 2. user key private repository에서만 사용 가능 travis ci에 private repository에 접근할 수 있는 개인키를 등록하는 방식 private to private일 경우 가장 효율적인 방법. 공식 홈페이지에 자세하게 나와있다. 3. github password 깃허브 id와 비밀번호를 통해 권한을 얻는 방법. 깃허브에서 현재 password를 이용한 접근은 지원하지 않는 것으로 보인다 4. github-access-token 공식 홈페이지의 방법을 따라해봤지만, github password와 마찬가지로 deprecated 되었다고 나온다 (혹시 성공하신 분 계신다면 댓글 바랍니다..) 권한은 얻은 이후, submodule을 받아오기 위해 git submodu 결론임시 방편으로 나는 deploy key를 통하여 문제를 해결하였다. user key와 github password를 이용한 방식은 사용 불가능하기 때문에 제외했고, github access token 방식도 계속 실패했기 때문에 남은 방법인 deploy key를 사용하였다. pass phrase로 개인키가 암호화 되어있다고는 하지만, public repository에 공개되는게 찝찝하기도 하고, 현재 상황에서 가장 좋은 해결책은 github-access-token을 이용하는 것이란 생각이 들기 때문에 계속 시도해봐야겠다","link":"/2021/10/28/travis-CI-private-repository-%ED%81%B4%EB%A1%A0%ED%95%98%EA%B8%B0/"},{"title":"Spring security 동작 원리","text":"Intro…개인 정보가 중요가 중요해지는 요즈음, 웹 사이트를 만드는데 있어서 개발자 또한 보안에 더욱 신경을 써야한다. 하지만 이제 막 개발을 시작한 내가 직접 안전한 보안, 인증, 인가 기능을 구현하기는 사실상 매우 힘들다고 볼 수 있다. 이러한 이유로 보안 관련 기능을 직접 구현하기 보다는 Spring Security를 도입하여 인증, 인가 기능을 구현하려 한다. 기능을 구현하기 앞서, Security의 특징과 동작 구조를 조사하기로 했다. 인증(Authenticate) : 웹사이트에 접근하려는 유저가 정상적인 로그인 과정을 통과하였는지 확인인가(Authorize) : 인증이 완료된 유저가 웹사이트의 특정 서비스를 요청할 때 , 해당 서비스를 요청할 권한이 있는지 확인 Spring Security 특징Spring Security의 특징은 다음과 같다. 스프링의 하위 프레임워크로서, 인증-인가와 관련된 다양한 기능을 제공. Filter 기반으로 비즈니스 로직과 분리되어 동작하므로 개발자는 비즈니스 로직에 집중할 수 있음 기본적으로 서버기반 인증(Session - cookie) 방식을 사용하지만 토큰 인증 방식도 사용 가능(spring-security-oauth2) Spring Security 동작 순서 로그인을 원하는 유저가 아이디와 비밀번호를 입력하고 로그인을 요청(HTTP Request) AuthenticationFilter가 입력받은 정보를 기반으로 UsernamePasswordAuthenticationToken을 생성, AuthenticationManager에 넘겨준다.(실제 구현체는 ProviderManager) 넘겨 받은 UsernamePasswordAuthenticationToken을 처리할 수 있는 AuthenticationProvider가 존재할 경우 UserDetailService를 통하여 DB에서 해당 유저의 정보를 가져온다. DB에서 가져온 유저 정보와 입력받은 유저 정보가 일치하면 Authentication 객체를 리턴, 일치하지 않는다면 예외를 던진다. 인증 완료된 Authentication 객체를 SecurityContextHolder에 저장한다.","link":"/2021/06/17/Spring-security-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC/"},{"title":"배포를 위한 호스팅 서비스 선택","text":"프로젝트를 배포하기 위한 서비스중 어떤것을 이용할지 고르기 위해 호스팅 서비스와 클라우드 서비스의 특징을 정리하였습니다 프로젝트 배포를 위한 서비스 선택후보 클라우드 서비스(AWS,AZURE) 호스팅 서비스(Cafe24,가비아) 클라우드 서비스 특징 유동적으로 사양을 늘릴 수 있음 특정 시간대에 따라 트래픽이 집중되는 상황에서 유리. 서버에 관하여 루트 권한을 얻을 수 있기 때문에 배포중인 서비스에 맞춰 커스터마이징(OS,DB,네트워크 설정 등) 가능 설정을 위해서 관련된 지식이 필요 스토리지, 데이터베이스, 네트워크, 소프트웨어, 모니터링 등의 서비스를 제공 로그 관리, 모니터링, 하드웨어 교체, 네트워크 관리 지원을 통해 개발에 집중할수 있는 환경을 제공 비용은 대체로 사용된 자원만큼 측정 호스팅 서비스 특징 서버호스팅 실제 물리적인 서버를 대여하여 사용 대여한 서버에 대하여 완전한 제어권을 얻음 서버관리의 측면에서 해당 업체의 적극적인 도움을 받을 수 있음 대규모의 트래픽이 발생하는 서비스에 적합 VPS 호스팅 물리적인 하나의 서버를 논리적으로 나누어 공유하여 사용(VPS &lt; 클라우드 &lt; 서버 호스팅) 클라우드, 서버 호스팅과 마찬가지로 대여한 서버에 대해 완전한 제어 가능 클라우드 서비스에 비하여 서버 확장이 유연하지 않음 [이미지 출처] https://library.gabia.com/contents/infrahosting/3915 (gabia.라이브러리) 결론 RentalDream 프로젝트는 수익을 위한 비즈니스 모델이 아닌 학습을 위한 프로젝트 수익을 바라는 프로젝트가 아니기 때문에 배포시 발생하는 비용 절감을 최우선적으로 고려 서비스가 배포된 후에도 실제 트래픽은 많지 않을것으로 예상. 그러므로 리소스 확장에 대한 요소는 고려 사항이 아님 데이터베이스 관리, 네트워크 포트 설정, CI/CD 설정 등등 서비스 운영을 위해서는 서버에 대한 완전 제어권 필요 위와 같은 이유로 VPS 서비스가 가장 적합하다고 생각 했지만, 아마존에서 제공하는 EC2가 1년 동안은 무료로 이용 가능하단 사실을 알게되었다.1년 동안 비용 없이 서비스를 배포하며 AWS에서 제공하는 강력한 기능들을 이용할 수 있기에 프로젝트 배포는 EC2를 이용하기로 하였다.현재 국내 유명 기업들 또한 AWS를 많이 사용하고 있으며, 우대 사항에 AWS 배포 경험이 있는걸 보아 이번 기회에 EC2에 대해 알아두면 여러 방면에서 도움이 될것이라 생각한다.","link":"/2021/10/19/%EB%B0%B0%ED%8F%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%98%B8%EC%8A%A4%ED%8C%85-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%84%A0%ED%83%9D/"},{"title":"스프링 부트를 이용한 웹 개발 1","text":"Intro…스프링 Security를 이용한 로그인 화면 개발 1. 프로젝트 목적프로젝트의 목적은 당근마켓과 비슷하게 지역성을 기반으로 한 물품 대여 웹사이트 개발입니다. 2. 개발 환경- JDK 11 - Intellij Ultimate - macOS Big Sur 3. 사용 기술1. Front End - Bootstrap - Webpack 2. Back End - Spring Boot - Spring MVC - Spring Security - Hibernate JPA 3. Database - h2 프로젝트를 진행하면서 추가되는 부분은 꾸준히 추가 하겠습니다.","link":"/2021/06/17/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9B%B9-%EA%B0%9C%EB%B0%9C-1/"},{"title":"스프링 부트를 이용한 웹 개발 시작","text":"Intro…스프링 학습을 위해 개인 프로젝트로 지역 주민들간 물건 공유 웹사이트를 개발하여 보기로 했습니다.개발 과정에서 얻을 수 있는 새로운 지식들을 정리하기 위하여 개발 일지를 블로그에 포스팅 하겠습니다. 1. 프로젝트 목적프로젝트의 목적은 당근마켓과 비슷하게 지역성을 기반으로 한 물품 대여 웹사이트 개발입니다. 2. 개발 환경- JDK 11 - Intellij Ultimate - macOS Big Sur 3. 사용 기술1. Front End - Bootstrap - Webpack 2. Back End - Spring Boot - Spring MVC - Spring Security - Hibernate JPA 3. Database - h2 프로젝트를 진행하면서 추가되는 부분은 꾸준히 추가 하겠습니다.","link":"/2021/06/17/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9B%B9-%EA%B0%9C%EB%B0%9C-%EC%8B%9C%EC%9E%91/"}],"tags":[{"name":"travis","slug":"travis","link":"/tags/travis/"},{"name":"travis ci","slug":"travis-ci","link":"/tags/travis-ci/"},{"name":"travis ci private","slug":"travis-ci-private","link":"/tags/travis-ci-private/"},{"name":"Spring Security","slug":"Spring-Security","link":"/tags/Spring-Security/"},{"name":"스프링 시큐리티","slug":"스프링-시큐리티","link":"/tags/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0/"},{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"호스팅","slug":"호스팅","link":"/tags/%ED%98%B8%EC%8A%A4%ED%8C%85/"},{"name":"클라우드 배포","slug":"클라우드-배포","link":"/tags/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EB%B0%B0%ED%8F%AC/"},{"name":"배포","slug":"배포","link":"/tags/%EB%B0%B0%ED%8F%AC/"},{"name":"spring","slug":"spring","link":"/tags/spring/"},{"name":"spring boot","slug":"spring-boot","link":"/tags/spring-boot/"},{"name":"spring mvc","slug":"spring-mvc","link":"/tags/spring-mvc/"}],"categories":[{"name":"개발일지","slug":"개발일지","link":"/categories/%EA%B0%9C%EB%B0%9C%EC%9D%BC%EC%A7%80/"},{"name":"Spring","slug":"Spring","link":"/categories/Spring/"},{"name":"TIL","slug":"TIL","link":"/categories/TIL/"},{"name":"Spring Boot Project","slug":"개발일지/Spring-Boot-Project","link":"/categories/%EA%B0%9C%EB%B0%9C%EC%9D%BC%EC%A7%80/Spring-Boot-Project/"}]}